import * as mobx from 'mobx';
import { useState } from 'react';

function isNumericKey(key: string) {
  return String(Number.parseInt(key)) === key;
}

export function keyToValueShape(key: string) {
  return isNumericKey(key) ? 'array' : 'object';
}

export function splitToPath(name: number | string) {
  return String(name).split('.');
}

// choose value
export function composeValue<T>(first: T, second: T) {
  if (first !== undefined) {
    return first;
  }
  return second;
}

// lodash.get fro mobx observable
export function observableGetIn(obj: any, key: string | string[], defaultValue?: any) {
  const path = Array.isArray(key) ? key : splitToPath(key);

  let target = obj;

  for (let i = 0; i < path.length; i += 1) {
    if (!mobx.isObservable(target)) {
      return defaultValue;
    }

    target = mobx.get(target, path[i]);
  }

  if (target === undefined) {
    return defaultValue;
  }

  return target;
}

export function observableSetIn(obj: unknown, key: string | string[], value: unknown) {
  const path = Array.isArray(key) ? key : splitToPath(key);
  const lastPartIndex = path.length - 1;

  let target = obj;

  for (let i = 0; i < lastPartIndex; i++) {
    const part = path[i];
    if (mobx.get(target, part) == null) {
      if (isNumericKey(path[i + 1])) {
        mobx.set(target, part, []);
      } else {
        mobx.set(target, part, {});
      }
    }

    target = mobx.get(target, part);
    if (!mobx.isObservable(target)) {
      return;
    }
  }

  if (mobx.isObservable(target)) {
    mobx.set(target, path[lastPartIndex], value);
  }
}

function generateRandomId(len: number) {
  const byteToHex = (byte: number) => ('0' + byte.toString(16)).slice(-2);
  const arr = new Uint8Array(len / 2);
  window.crypto.getRandomValues(arr);
  return Array.from(arr, byteToHex).join('');
}

export function useHtmlIdPrefix(htmlIdPrefixProp: string) {
  const [autoGeneratedPrefix] = useState(() => `form_${generateRandomId(6)}`);
  if (htmlIdPrefixProp !== undefined) {
    return htmlIdPrefixProp;
  }
  return autoGeneratedPrefix;
}
